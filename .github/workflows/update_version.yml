name: FractureX's translation module

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git fetch --tags
          git config --global user.email "shaquille.montero.vergel123@gmail.com"
          git config --global user.name "GitHub Actions"

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "tag=$latest_tag" >> $GITHUB_ENV

      - name: Get the list of changed files
        id: changes
        run: |
          new_files=$(git diff --name-status HEAD~1 HEAD | grep '^A' | awk '{print $2}')
          modified_files=$(git diff --name-status HEAD~1 HEAD | grep '^M' | awk '{print $2}')
          new_directories=$(git diff --dirstat=files,0 HEAD~1 HEAD | awk '{print $2}' | grep '/$')
          echo "new_files=$new_files" >> $GITHUB_ENV
          echo "modified_files=$modified_files" >> $GITHUB_ENV
          echo "new_directories=$new_directories" >> $GITHUB_ENV

      - name: Calculate new version
        id: calculate_version
        run: |
          current_version=${{ env.tag }}
          major=$(echo $current_version | cut -d. -f1 | cut -c2-)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          new_major=$major
          new_minor=$minor
          new_patch=$patch

          if [ "${{ env.new_directories }}" != "" ]; then
            new_major=$((major + 1))
            new_minor=0
            new_patch=0
          elif [ "${{ env.new_files }}" != "" ]; then
            new_minor=$((minor + 1))
            new_patch=0
          elif [ "${{ env.modified_files }}" != "" ]; then
            new_patch=$((patch + 1))
          fi

          new_version="v${new_major}.${new_minor}.${new_patch}"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          new_version=${{ env.new_version }}
          git tag $new_version
          git push origin $new_version

      - name: Generate badge
        run: |
          new_version=${{ env.new_version }}
          curl -o badge.svg "https://img.shields.io/badge/version-${new_version}-blue"
          echo "Badge created."

      - name: Commit badge
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'FractureX'
          author_email: 'shaquille.montero.vergel123@gmail.com'
          message: 'Update version badge'
          add: 'badge.svg'
