name: FractureX's translation module

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git fetch --tags
          git config --global user.email "shaquille.montero.vergel123@gmail.com"
          git config --global user.name "GitHub Actions"

      - name: Get the latest tag
        id: get_latest_tag
        run: echo "::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)"

      - name: Get the list of changed files
        id: changes
        run: |
          echo "::set-output name=new_files::$(git diff --name-status HEAD~1 HEAD | grep '^A' | awk '{print $2}')"
          echo "::set-output name=modified_files::$(git diff --name-status HEAD~1 HEAD | grep '^M' | awk '{print $2}')"
          echo "::set-output name=new_directories::$(git diff --dirstat=files,0 HEAD~1 HEAD | awk '{print $2}' | grep '/$')"

      - name: Calculate new version
        id: calculate_version
        run: |
          current_version=${{ steps.get_latest_tag.outputs.tag }}
          major=$(echo $current_version | cut -d. -f1 | cut -c2-)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          new_major=$major
          new_minor=$minor
          new_patch=$patch

          if [ "${{ steps.changes.outputs.new_directories }}" != "" ]; then
            new_major=$((major + 1))
          elif [ "${{ steps.changes.outputs.new_files }}" != "" ]; then
            new_minor=$((minor + 1))
          elif [ "${{ steps.changes.outputs.modified_files }}" != "" ]; then
            new_patch=$((patch + 1))
          fi

          new_version="v${new_major}.${new_minor}.${new_patch}"
          echo "::set-output name=new_version::${new_version}"

      - name: Create new tag
        run: |
          new_version=${{ steps.calculate_version.outputs.new_version }}
          git tag $new_version
          git push origin $new_version

      - name: Generate badge
        run: |
          new_version=${{ steps.calculate_version.outputs.new_version }}
          curl -o badge.svg "https://img.shields.io/badge/version-${new_version}-blue"
          echo "Badge created."

      - name: Commit badge
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'FractureX'
          author_email: 'shaquille.montero.vergel123@gmail.com'
          message: 'Update version badge'
          add: 'badge.svg'
